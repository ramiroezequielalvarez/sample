string query = $$"""
WITH HighLevelSolutionGroups AS (
    SELECT
        A.entity_uid AS LegacySolutionId,
        A.entity_name AS LegacySolutionName,
        C.value AS LegacyCibConfigurationId,
        D.value AS EffectiveDate,
        A.lastModifiedDate AS CibLastModifiedDate,
        E.updated_by AS CibLastModifiedBy
    FROM accountmatrix.entity A
    INNER JOIN accountmatrix.entity_attribute B ON A.entity_uid = B.entity_uid
    INNER JOIN accountmatrix.entity_attribute C ON A.entity_uid = C.entity_uid
    INNER JOIN accountmatrix.entity_attribute D ON A.entity_uid = D.entity_uid
    INNER JOIN accountmatrix.entity E ON E.entity_uid = C.value
    WHERE
        A.entity_type_name = 'ACCOUNT_GROUP'
        AND B.attribute_name = 'ACCOUNT_GROUP_TYPE'
        AND B.value = 'IDI_Composite'
        AND C.attribute_name = 'InvestableBenchmarkConfigurationTable'
        AND D.attribute_name = 'EffectiveDate'
),
ManualRebalanceDates AS (
    SELECT
        A.LegacySolutionId,
        A.LegacySolutionName,
        CAST(B.value AS DATE) AS AsOfDate,
        'Seed Data from AMS' AS Comment,
        CASE
            WHEN B.attribute_name = 'ManualCIBRebalanceDate' THEN 'Included'
            WHEN B.attribute_name = 'ManualCIBRebalanceDate_Exclusion' THEN 'Excluded'
            ELSE 'SomethingWeirdHappened'
        END AS ManualExclusionRule,
        'Approved' AS Status,
        1 AS Active,
        B.lastModifiedDate AS ReceivedDateTime,
        B.lastModifiedDate AS ApprovedDateTime,
        B.lastModifiedDate AS CreatedDate,
        B.updated_by AS CreatedBy
    FROM HighLevelSolutionGroups A
    INNER JOIN accountmatrix.entity_attribute B ON B.entity_uid = A.LegacyCibConfigurationId
    WHERE B.attribute_name IN ('ManualCIBRebalanceDate', 'ManualCIBRebalanceDate_Exclusion')
)
SELECT *
FROM ManualRebalanceDates
ORDER BY LegacySolutionId, AsOfDate
""";



public class ManualRebalanceDateDto
{
    public Guid LegacySolutionId { get; set; }
    public string LegacySolutionName { get; set; }
    public DateTime AsOfDate { get; set; }
    public string Comment { get; set; }
    public string ManualExclusionRule { get; set; }
    public string Status { get; set; }
    public int Active { get; set; }
    public DateTime ReceivedDateTime { get; set; }
    public DateTime ApprovedDateTime { get; set; }
    public DateTime CreatedDate { get; set; }
    public string CreatedBy { get; set; }
}


// Crear diccionario para búsqueda rápida por LegacySolutionId
var alphaMap = alpha.ToDictionary(x => x.LegacySolutionId, x => x.Id);

// Hacer el join y setear el campo en legacyTupleList
foreach (var dto in legacyTupleList)
{
    if (alphaMap.TryGetValue(dto.LegacySolutionId, out var sampleId))
    {
        dto.CustomInvestableBenchmarkSolutionGroupId = sampleId;
    }
}


var resultadosCompletos = legacyTupleList
    .Where(x => x.CustomInvestableBenchmarkSolutionGroupId != 0) // opcional, si querés filtrar solo los que hicieron match
    .ToList();
