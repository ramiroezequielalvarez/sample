
        .OrWhereRaw("DATE(\"ExternalManagerClientSolutions\".\"EndDate\") > ?", DateTime.UtcNow.Date) // Trunca la fecha en SQL


    .WhereTrue("ExternalManagerClientSolutions.Active")
    .Where(q => q
        .WhereNull("ExternalManagerClientSolutions.EndDate") // Condición para EndDate = NULL
        .OrWhere("ExternalManagerClientSolutions.EndDate", ">", DateTime.UtcNow.Date)

SELECT DISTINCT
    "ExternalManagerClientSolutions"."ExternalManagerConfigId" AS "ClientSolutionManagerConfig",
    "ExternalManagerClientSolutions"."Active" AS "ClientSolutionManagerConfigActive"
FROM
    "ExternalManagerClientSolutions"
JOIN
    "ExternalManagerConfigs"
ON
    "ExternalManagerClientSolutions"."ExternalManagerConfigId" = "ExternalManagerConfigs"."Id"
WHERE
    "ExternalManagerClientSolutions"."Active" = TRUE
    AND (
        "ExternalManagerClientSolutions"."EndDate" IS NULL
        OR "ExternalManagerClientSolutions"."EndDate" > CURRENT_DATE
    );


SELECT DISTINCT
    "ExternalManagerClientSolutions"."ExternalManagerConfigId" AS "ClientSolutionManagerConfig",
    "ExternalManagerClientSolutions"."Active" AS "ClientSolutionManagerConfigActive"
FROM
    "ExternalManagerClientSolutions"
JOIN
    "ExternalManagerConfigs"
ON
    "ExternalManagerClientSolutions"."ExternalManagerConfigId" = "ExternalManagerConfigs"."Id"
WHERE
    "ExternalManagerClientSolutions"."Active" = TRUE;




ngOnDestroy(): void {
  this.subscriptions.forEach((s, index) => {
    console.log(`Unsubscribing from subscription ${index}:`, s); // Agregar un log para cada desuscripción
    s.unsubscribe();
  });
  console.log('All subscriptions have been unsubscribed.'); // Mensaje al final
}
subscribe(): void {
  // solutionGroupingDetail$
  this.subscriptions.push(
    this.solutionGroupingDetailLoaded$
      .pipe(
        filter(loaded => loaded), // Continuar solo si loaded es true
        switchMap(() => this.solutionGroupingDetail$) // Cancelar suscripciones anteriores
      )
      .subscribe(solutionGroupDetail => {
        this.solutionGroupDetails$.next(solutionGroupDetail);
      })
  );

  // solutionGroupingHeader$
  this.subscriptions.push(
    this.solutionGroupingHeaderLoaded$
      .pipe(
        filter(loaded => loaded), // Continuar solo si loaded es true
        switchMap(() => this.solutionGroupingHeader$) // Cancelar suscripciones anteriores
      )
      .subscribe(solutionGroupHeader => {
        this.curvesFacade.loadClientCurves(solutionGroupHeader.ClientEntityId);
        this.solutionGroupHeader$.next(solutionGroupHeader);
        console.log('SG HEADER', solutionGroupHeader);
      })
  );

  // solutionGroupingCashFlow$
  this.subscriptions.push(
    this.solutionGroupingCashFlowLoaded$
      .pipe(
        filter(loaded => loaded), // Continuar solo si loaded es true
        switchMap(() => this.solutionGroupingCashFlow$) // Cancelar suscripciones anteriores
      )
      .subscribe(solutionGroupCashFlow => {
        this.solutionGroupCashFlow$.next(solutionGroupCashFlow);
      })
  );

  // solutionGroupingExternalManager$
  this.subscriptions.push(
    this.solutionGroupingExternalManagersLoaded$
      .pipe(
        filter(loaded => loaded), // Continuar solo si loaded es true
        switchMap(() => this.solutionGroupingExternalManager$) // Cancelar suscripciones anteriores
      )
      .subscribe(solutionGroupExternalManager => {
        this.solutionGroupExternalManagers$.next(solutionGroupExternalManager);
      })
  );
}
